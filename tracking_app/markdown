# 프로젝트 작업 기록 - 2025.04.19

## ✅ 1. 프로젝트 개요 및 목표
**프로젝트**: 수출입 물류 추적 자동화 시스템

**목표**: 
- 소규모 기업의 수출입 물류 관리 자동화
- 트래킹 번호를 입력하면, 자동으로 항공사, 예상 도착일, 운송 상태 등을 확인할 수 있는 시스템 개발

**주요 기능**:
- 트래킹 번호 입력/업로드 기능
- 자동 항공사 식별
- 실시간 또는 주기적인 데이터 업데이트
- ETA 및 현재 상태 자동 표시
- 데이터 시각화 및 필터링 기능

---

## 🧠 2. 기술 스택 및 시스템 설계
**기술 스택**:
- **Python**: 주 프로그래밍 언어
- **AfterShip API**: 트래킹 정보 자동 수집 및 상태 추적
- **Streamlit**: 웹 대시보드
- **Flask/FastAPI**: 백엔드 API 개발
- **Pandas**: 데이터 처리 및 분석
- **Celery**: 비동기 작업 처리

---

## 📦 3. AfterShip API와의 통합
- **AfterShip API**를 활용하여 트래킹 정보를 가져오는 방법 정의
  - 트래킹 번호 입력시, 자동으로 항공사(슬러그) 식별
  - 트래킹 번호로 상세 정보(상태, ETA 등) 조회
- API 응답을 처리하여 `tracking_number`, `carrier`, `status`, `ETA` 정보를 표시

---

## 🛠️ 4. 코드 수정 및 개선
**기능 개선**:
- **트래킹 번호 자동 인식**: 사용자가 입력한 트래킹 번호에 대해 자동으로 운송사를 감지하도록 구현
- **검색 결과에 운송사 표시**: 트래킹 정보를 조회한 후 운송사명을 함께 표시
- **입력 처리 개선**: 여러 개의 트래킹 번호를 입력 시, 자동으로 처리하여 결과 출력

**API 요청 흐름**:
1. **트래킹 번호 등록 (POST)** → 자동으로 항공사(슬러그) 식별
2. **트래킹 정보 조회 (GET)** → 트래킹 상태, ETA 등 상세 정보 확인

---

## 🧪 5. 디버깅 및 테스트
- **API 응답 오류 해결**:
  - "The value of `id` is invalid." 오류 메시지를 점검하고, 정상적인 API 요청이 이루어지도록 코드 수정
  - 트래킹 정보가 올바르게 반환되도록 API 응답 처리 코드 조정
- **실제 트래킹 번호 테스트**:
  - `UPS`, `FedEx`와 같은 주요 운송사의 트래킹 번호를 사용하여 API 응답 결과를 확인

---

## 💡 6. 학습 내용
- **API 요청 및 응답 처리**:
  - POST와 GET 요청을 이용하여 트래킹 정보를 등록하고 조회하는 방법
- **정규 표현식(Regex)** 및 **NLP** 기본 개념과 활용
- **Streamlit**을 이용한 간단한 대시보드 구성 방법
- **에러 핸들링 및 디버깅**:
  - API 응답이 실패할 때의 오류 처리 방법 및 결과 표시 개선

---



# 프로젝트 작업 기록 - 2025.04.20

## ✅ 1. 프로젝트 목표 확인 및 기능 정리
**프로젝트**: 수출입 물류 추적 자동화 시스템

**주요 기능**:
- 트래킹 번호 입력/업로드
- **운송사 자동 식별**
- 실시간 상태 추적
- ETA(예상 도착일) 확인
- 데이터 시각화 및 필터링

---

## 🧠 2. 기술 스택 및 구조
- **Python + Streamlit**: 프론트엔드 대시보드
- **AfterShip API**: 트래킹 정보 자동 수집
- **Pandas**: 데이터프레임 정리 및 표시
- 추후 예정 기술: Celery, Docker, DB (PostgreSQL 등)

---

## 📦 3. AfterShip API 연동 기능 구현
- `.env` 파일로 API 키 보안 관리
- API 요청 흐름 정리:
  1. **트래킹 번호 등록 (POST)** → 자동 slug 감지
  2. **slug와 트래킹 번호로 상세정보 조회 (GET)**
- 트래킹 상태 응답 처리 (status, ETA, carrier 등)

---

## 🛠️ 4. Streamlit 대시보드 초기 버전 완성
- 사용자 입력: 콤마(,)로 구분된 다중 트래킹 번호
- 결과 테이블로 출력 (Tracking #, 운송사, 상태, ETA)

---

## 🧪 5. 테스트 및 디버깅
- API 키 확인 및 유효성 점검 (`4015` 에러 해결)
- 트래킹 테스트:
  - ❌ 잘못된 번호 → 오류 메시지 출력
  - ✅ **FedEx 테스트 번호**: `449044304137821` 사용

---

## 💡 오늘 배운 개념
- `requests.post()`와 `requests.get()`의 용도
- `x.strip()`을 이용한 입력 정리
- API 응답 구조 파싱
- Streamlit UI 기본 구성 방법

---
6/1

오늘의 Struggle & 문제점 요약
AfterShip API 무료버전 한계

실제 트래킹 번호 입력해도 실시간 데이터 안 나옴

샌드박스/무료 버전 제약으로 인해 실사용 데이터 접근 제한

다중 운송사 API 통합 설계

여러 운송사(FedEx, UPS, USPS, DHL) API를 하나의 앱에서 관리하는 코드 작성

한국 운송사는 제외하는 조건 추가

FedEx API 인증과 토큰 문제

Client ID, Client Secret 구분 및 발급 혼란

액세스 토큰 만료 및 갱신 관리 어려움

샌드박스 인증과 프로덕션 인증 혼동으로 권한 오류 발생

UPS API 신청 및 인증 문제

API 키 발급 실패 또는 권한 문제

UPS 대신 USPS 사용 결정

USPS API 사용 및 응답 문제

샌드박스 계정 권한으로 인해 실시간 트래킹 데이터 못 받음

실제 배송 번호 입력해도 “No tracking information found” 에러 발생

API 호출 형식과 인증, Production 환경 확인 필요성

개발 환경 및 실행 문제

Streamlit 앱 실행 경로 문제 (app.py 위치 인지 및 실행)

모듈 임포트 오류 (ImportError) 문제

앞으로의 개선 방향
API 권한 및 환경 분명히 구분

각 운송사 API는 샌드박스 vs 프로덕션 모드 명확히 구분

프로덕션용 인증 정보 제대로 확보 후 테스트 진행

토큰 갱신 및 만료 처리 자동화 코드 추가 고려

API 호출 및 응답 처리 정밀화

API 요청 파라미터, 헤더, URL 등 정확히 맞춤

응답 결과 XML/JSON 파싱 로직 견고하게 작성

오류 케이스별 예외 처리 강화

테스트 환경 분리 및 유효한 샘플 데이터 확보

실사용 가능한 배송 번호 확보 및 테스트

직접 API 호출 결과를 터미널/브라우저에서 확인해 디버깅

코드 구조화 및 모듈화 유지

각 운송사별 모듈 독립 유지

detect_carrier 로 운송사 자동 인식 로직 개선

공통 인터페이스 제공으로 확장성 높임

실행 환경 및 배포 확인

Streamlit 실행 파일 경로 명확히

의존성 및 패키지 관리 철저 (requirements.txt 등)

로컬에서 정상 동작 후 클라우드 배포 고려

문서화 및 사용법 안내 보완

API 키 발급 방법, 환경 변수 설정 등 문서화

사용자가 쉽게 테스트할 수 있는 샘플 번호 및 예제 코드 제공

